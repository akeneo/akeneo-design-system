import React, { AnchorHTMLAttributes, ButtonHTMLAttributes, ReactNode, SyntheticEvent } from 'react';
import { Level } from '../../theme';
import { Override } from '../../shared';
type ButtonSize = 'small' | 'default';
type ButtonProps = Override<ButtonHTMLAttributes<HTMLButtonElement> & AnchorHTMLAttributes<HTMLAnchorElement>, {
    level?: Level;
    ghost?: boolean;
    disabled?: boolean;
    active?: boolean;
    size?: ButtonSize;
    onClick?: (event: SyntheticEvent) => void;
    href?: string;
    ariaLabel?: string;
    ariaLabelledBy?: string;
    ariaDescribedBy?: string;
    children?: ReactNode;
}>;
declare const Button: React.ForwardRefExoticComponent<Omit<React.ButtonHTMLAttributes<HTMLButtonElement> & React.AnchorHTMLAttributes<HTMLAnchorElement>, "children" | "href" | "onClick" | "size" | "active" | "disabled" | "level" | "ghost" | "ariaLabel" | "ariaLabelledBy" | "ariaDescribedBy"> & {
    level?: Level | undefined;
    ghost?: boolean | undefined;
    disabled?: boolean | undefined;
    active?: boolean | undefined;
    size?: ButtonSize | undefined;
    onClick?: ((event: SyntheticEvent) => void) | undefined;
    href?: string | undefined;
    ariaLabel?: string | undefined;
    ariaLabelledBy?: string | undefined;
    ariaDescribedBy?: string | undefined;
    children?: ReactNode;
} & React.RefAttributes<HTMLButtonElement>>;
export { Button };
export type { ButtonProps, ButtonSize };
